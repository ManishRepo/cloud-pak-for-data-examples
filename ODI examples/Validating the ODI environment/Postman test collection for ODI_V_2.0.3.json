{
	"info": {
		"_postman_id": "ccfccd85-5570-4aad-8084-427e4e47551e",
		"name": "IBM_ODI_Sample_API_Requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get or Refresh Access Token",
			"item": [
				{
					"name": "01 Get Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody)\r",
									"pm.environment.set(\"access_token\", data.access_token);\r",
									"//pm.globals.set(\"access_token\", data.access_token);\r",
									"//added this new line\r",
									"pm.environment.set(\"refresh_token\", data.refresh_token)  \r",
									"pm.environment.set(\"id_token\", data.id_token);\r",
									"\r",
									"// Check for a successful HTTP response\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{CLIENT_ID}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{CLIENT_SECRET}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{USER_ID}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{USER_PASSWORD}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Token_Fetch_URL}}",
							"host": [
								"{{Token_Fetch_URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "02 Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// this snippet extracts the new access and id tokens",
									"// and puts them to environment variables",
									"cp = pm.environment.get(\"cloud_platform\");",
									"",
									"var data = JSON.parse(responseBody)",
									"pm.environment.set(\"access_token\", data.access_token);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// cp = pm.environment.get(\"cloud_platform\");\r",
									"\r",
									"// if (cp == \"GCP\") {\r",
									"//  pm.environment.set(\"Scope\", \"email openid profile\")\r",
									"//   }\r",
									"//else {\r",
									"//    client_id = pm.environment.get(\"CLIENT_ID\");\r",
									"//    pm.environment.set(\"Scope\", client_id + \"/.default openid profile offline_access\")\r",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Ocp-Apim-Subscription-Key",
								"type": "text",
								"value": "xxxxxxxx",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{CLIENT_ID}}",
									"description": "Supply your client id as an environment variable",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{CLIENT_SECRET}}",
									"description": "Supply your client secret as an environment variable",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{Scope}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Token_Fetch_URL}}",
							"host": [
								"{{Token_Fetch_URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "03 Get Access Token - Entitlement-User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody)\r",
									"pm.environment.set(\"ent_v2_access_token\", data.access_token);\r",
									"//pm.globals.set(\"access_token\", data.access_token);\r",
									"//added this new line\r",
									"//pm.environment.set(\"refresh_token\", data.refresh_token)  \r",
									"//pm.environment.set(\"id_token\", data.id_token);\r",
									"\r",
									"// Check for a successful HTTP response\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{CLIENT_ID}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{CLIENT_SECRET}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{ENT_V2_USER_ID}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{ENT_V2_USER_PASSWORD}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Token_Fetch_URL}}",
							"host": [
								"{{Token_Fetch_URL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delivery",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{DELIVERY_HOST}}{{docs_suffix}}",
									"host": [
										"{{DELIVERY_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "getSignedUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for a successful HTTP response\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"srns\": [\n\t\t\"srn:file/segy:mysegy1:\",\n\t\t\"not_supposed_to_be_found\",\n\t\t\"srn:file/csv:happy:1.0.0\"\n\t]\n}"
								},
								"url": {
									"raw": "{{DELIVERY_HOST}}/GetFileSignedUrl?=",
									"host": [
										"{{DELIVERY_HOST}}"
									],
									"path": [
										"GetFileSignedUrl"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Entitlements V2",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{ENTITLEMENTS_V2_HOST}}{{docs_suffix}}",
									"host": [
										"{{ENTITLEMENTS_V2_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "01 Entitlements - Create Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201 or 409\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 409]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ent_v2_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"user.wellbore.welldb\",\r\n    \"description\" : \"User Group For Wellbore Well Database Activities\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ENTITLEMENTS_V2_HOST}}/groups",
									"host": [
										"{{ENTITLEMENTS_V2_HOST}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 Entitlements - Get groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for a successful HTTP response",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ent_v2_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "This value should be the desired data partition id.",
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									}
								],
								"url": {
									"raw": "{{ENTITLEMENTS_V2_HOST}}/groups",
									"host": [
										"{{ENTITLEMENTS_V2_HOST}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Legal",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{LEGAL_HOST}}{{docs_suffix}}",
									"host": [
										"{{LEGAL_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "01 Legal - Create Legal Tag",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"tagName\", \"Test-Legal-Tag-\" + _.random(1, 9999999));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Ensure the API was able to send a successful response",
											"pm.test(\"Status code is 200 or 201 or 400\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400]);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{tagName}}\",\n    \"description\": \"Legal Tag added for Well\",\n    \"properties\": {\n        \"contractId\": \"123456\",\n        \"countryOfOrigin\": [\n            \"US\",\n            \"CA\"\n        ],\n        \"dataType\": \"Third Party Data\",\n        \"exportClassification\": \"EAR99\",\n        \"originator\": \"Schlumberger\",\n        \"personalData\": \"No Personal Data\",\n        \"securityClassification\": \"Private\",\n        \"expirationDate\": \"2025-12-25\"\n    }\n}"
								},
								"url": {
									"raw": "{{LEGAL_HOST}}/legaltags",
									"host": [
										"{{LEGAL_HOST}}"
									],
									"path": [
										"legaltags"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Schema",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{SCHEMA_HOST}}{{docs_suffix}}",
									"host": [
										"{{SCHEMA_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "01 Adds a schema to the schema repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody)\r",
											"var resp_code= pm.response.code;\r",
											"pm.test(\"Status code is 200 or 201 or 400\", function () {\r",
											"    pm.expect(resp_code).to.be.oneOf([200, 201, 400]);\r",
											"});\r",
											"if ((resp_code == 200) || (resp_code == 201)) {\r",
											"    pm.environment.set(\"kind\", data.schemaIdentity.id);    \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"entityType\", \"master-data--Wellbore-\" + _.random(1, 9999999));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemaInfo\": {\r\n    \"schemaIdentity\": {\r\n      \"authority\": \"opendes\",\r\n      \"source\": \"wks\",\r\n      \"entityType\": \"{{entityType}}\",\r\n      \"schemaVersionMajor\": 1,\r\n      \"schemaVersionMinor\": 0,\r\n      \"schemaVersionPatch\": 0      \r\n    },\r\n    \"createdBy\": \"OSDU Data Definition Group\",\r\n    \"scope\": \"SHARED\",\r\n    \"status\": \"DEVELOPMENT\"\r\n  },\r\n  \"schema\": {\r\n    \"x-osdu-license\": \"Copyright 2021, The Open Group \\\\nLicensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 . Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\",\r\n    \"$id\": \"https://schema.osdu.opengroup.org/json/master-data/Wellbore.1.0.0.json\",\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"x-osdu-schema-source\": \"osdu:wks:master-data--Wellbore:1.0.0\",\r\n    \"title\": \"Wellbore\",\r\n    \"description\": \"A hole in the ground extending from a point at the earth'\\\\''s surface to the maximum point of penetration.\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n      \"id\": {\r\n        \"description\": \"Previously called ResourceID or SRN which identifies this OSDU resource object without version.\",\r\n        \"title\": \"Entity ID\",\r\n        \"type\": \"string\",\r\n        \"pattern\": \"^[\\\\w\\\\-\\\\.]+:master-data\\\\-\\\\-Wellbore:[\\\\w\\\\-\\\\.\\\\:\\\\%]+$\",\r\n        \"example\": \"namespace:master-data--Wellbore:c7c421a7-f496-5aef-8093-298c32bfdea9\"\r\n      },\r\n      \"kind\": {\r\n        \"description\": \"The schema identification for the OSDU resource object following the pattern {Namespace}:{Source}:{Type}:{VersionMajor}.{VersionMinor}.{VersionPatch}. The versioning scheme follows the semantic versioning, https://semver.org/.\",\r\n        \"title\": \"Entity Kind\",\r\n        \"type\": \"string\",\r\n        \"pattern\": \"^[\\\\w\\\\-\\\\.]+:[\\\\w\\\\-\\\\.]+:[\\\\w\\\\-\\\\.]+:[0-9]+.[0-9]+.[0-9]+$\",\r\n        \"example\": \"osdu:wks:master-data--Wellbore:1.0.0\"\r\n      },\r\n      \"version\": {\r\n        \"description\": \"The version number of this OSDU resource; set by the framework.\",\r\n        \"title\": \"Version Number\",\r\n        \"type\": \"integer\",\r\n        \"format\": \"int64\",\r\n        \"example\": 1562066009929332\r\n      },\r\n      \"acl\": {\r\n        \"description\": \"The access control tags associated with this entity.\",\r\n        \"title\": \"Access Control List\",\r\n        \"$ref\": \"osdu:wks:AbstractAccessControlList:1.0.0\"\r\n      },\r\n      \"legal\": {\r\n        \"description\": \"The entity'\\\\''s legal tags and compliance status. The actual contents associated with the legal tags is managed by the Compliance Service.\",\r\n        \"title\": \"Legal Tags\",\r\n        \"$ref\": \"osdu:wks:AbstractLegalTags:1.0.0\"\r\n      },\r\n      \"tags\": {\r\n        \"title\": \"Tag Dictionary\",\r\n        \"description\": \"A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.\",\r\n        \"type\": \"object\",\r\n        \"additionalProperties\": {\r\n          \"type\": \"string\"\r\n        },\r\n        \"example\": {\r\n          \"NameOfKey\": \"String value\"\r\n        }\r\n      },\r\n      \"createTime\": {\r\n        \"description\": \"Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.\",\r\n        \"title\": \"Resource Object Creation DateTime\",\r\n        \"type\": \"string\",\r\n        \"format\": \"date-time\",\r\n        \"example\": \"2020-12-16T11:46:20.163Z\"\r\n      },\r\n      \"createUser\": {\r\n        \"title\": \"Resource Object Creation User Reference\",\r\n        \"description\": \"The user reference, which created the first version of this resource object. Set by the System.\",\r\n        \"type\": \"string\",\r\n        \"example\": \"some-user@some-company-cloud.com\"\r\n      },\r\n      \"modifyTime\": {\r\n        \"description\": \"Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.\",\r\n        \"title\": \"Resource Object Version Creation DateTime\",\r\n        \"type\": \"string\",\r\n        \"format\": \"date-time\",\r\n        \"example\": \"2020-12-16T11:52:24.477Z\"\r\n      },\r\n      \"modifyUser\": {\r\n        \"title\": \"Resource Object Version Creation User Reference\",\r\n        \"description\": \"The user reference, which created this version of this resource object. Set by the System.\",\r\n        \"type\": \"string\",\r\n        \"example\": \"some-user@some-company-cloud.com\"\r\n      },\r\n      \"ancestry\": {\r\n        \"description\": \"The links to data, which constitute the inputs.\",\r\n        \"title\": \"Ancestry\",\r\n        \"$ref\": \"osdu:wks:AbstractLegalParentList:1.0.0\"\r\n      },\r\n      \"meta\": {\r\n        \"description\": \"The Frame of Reference meta data section linking the named properties to self-contained definitions.\",\r\n        \"title\": \"Frame of Reference Meta Data\",\r\n        \"type\": \"array\",\r\n        \"items\": {\r\n          \"$ref\": \"osdu:wks:AbstractMetaItem:1.0.0\"\r\n        }\r\n      },\r\n      \"data\": {\r\n        \"allOf\": [\r\n          {\r\n            \"$ref\": \"osdu:wks:AbstractCommonResources:1.0.0\"\r\n          },\r\n          {\r\n            \"$ref\": \"osdu:wks:AbstractMaster:1.0.0\"\r\n          },\r\n          {\r\n            \"$ref\": \"osdu:wks:AbstractFacility:1.0.0\"\r\n          },\r\n          {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n              \"WellID\": {\r\n                \"type\": \"string\",\r\n                \"pattern\": \"^[\\\\w\\\\-\\\\.]+:master-data\\\\-\\\\-Well:[\\\\w\\\\-\\\\.\\\\:\\\\%]+:[0-9]*$\",\r\n                \"x-osdu-relationship\": [\r\n                  {\r\n                    \"GroupType\": \"master-data\",\r\n                    \"EntityType\": \"Well\"\r\n                  }\r\n                ]\r\n              },\r\n              \"SequenceNumber\": {\r\n                \"description\": \"A number that indicates the order in which wellbores were drilled.\",\r\n                \"type\": \"integer\"\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n              \"ExtensionProperties\": {\r\n                \"type\": \"object\"\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"required\": [\r\n      \"kind\",\r\n      \"acl\",\r\n      \"legal\"\r\n    ],\r\n    \"additionalProperties\": false,\r\n    \"x-osdu-inheriting-from-kind\": []\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{SCHEMA_HOST}}/schema",
									"host": [
										"{{SCHEMA_HOST}}"
									],
									"path": [
										"schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 Get Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{SCHEMA_HOST}}/schema/{{kind}}",
									"host": [
										"{{SCHEMA_HOST}}"
									],
									"path": [
										"schema",
										"{{kind}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Storage",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{STORAGE_HOST}}{{docs_suffix}}",
									"host": [
										"{{STORAGE_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Methods",
					"item": [
						{
							"name": "01 Storage - Get all kinds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status description - OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"var counter = jsonData.results.length;",
											"console.log(counter);",
											"tests[\"Total number of kinds retrived: \" + counter] = counter > 0;",
											"}",
											"catch (e) {",
											"    console.log(e.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "This value should be the desired data partition id.",
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{STORAGE_HOST}}/query/kinds",
									"host": [
										"{{STORAGE_HOST}}"
									],
									"path": [
										"query",
										"kinds"
									],
									"query": [
										{
											"key": "cursor",
											"value": null,
											"description": "string",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "200",
											"description": "integer (int32)",
											"disabled": true
										}
									]
								},
								"description": "Get all kinds\nThe API returns a list of all kinds in the specific {Slb-Data-Partition-Id}. Required roles: 'users.datalake.editors' or 'users.datalake.admins'."
							},
							"response": []
						},
						{
							"name": "02 Legal - Create Legal Tag",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"tagName\", \"Test-Legal-Tag-\" + _.random(1, 9999999));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Ensure the API was able to send a successful response",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"try {",
											"    let resBody = pm.response.json();",
											"    let createdLegaltagName = resBody.name;",
											"    pm.environment.set(\"tagName\", createdLegaltagName);",
											"    pm.environment.set(\"LegalTagNameExists\", createdLegaltagName);",
											"    console.log(createdLegaltagName.length);",
											"    tests[\"Leagal tag created: \" + createdLegaltagName] = createdLegaltagName.length > 1;",
											"}",
											"catch (e) {",
											"    console.log(e.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{tagName}}\",\n    \"description\": \"Legal Tag added for Well\",\n    \"properties\": {\n        \"contractId\": \"123456\",\n        \"countryOfOrigin\": [\n            \"US\",\n            \"CA\"\n        ],\n        \"dataType\": \"Third Party Data\",\n        \"exportClassification\": \"EAR99\",\n        \"originator\": \"Schlumberger\",\n        \"personalData\": \"No Personal Data\",\n        \"securityClassification\": \"Private\",\n        \"expirationDate\": \"2025-12-25\"\n    }\n}"
								},
								"url": {
									"raw": "{{LEGAL_HOST}}/legaltags",
									"host": [
										"{{LEGAL_HOST}}"
									],
									"path": [
										"legaltags"
									]
								}
							},
							"response": []
						},
						{
							"name": "03 Storage - Create records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody)",
											"var resp_code= pm.response.code;",
											"pm.test(\"Status code is 200 or 201 or 400\", function () {",
											"    pm.expect(resp_code).to.be.oneOf([200, 201, 400]);",
											"});",
											"if ((resp_code == 200) || (resp_code == 201)) {",
											"    pm.environment.set(\"recordID\", data.recordIds[0]);",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//pm.environment.set(\"recordID\", \"common:welldb:\" + _.random(1, 9999999));\r",
											"var rand = _.random(999111111111, 999999999999);\r",
											"var dataPartition = pm.environment.get(\"data-partition-id\");\r",
											"var record = pm.environment.get(\"record_mid\");\r",
											"postman.setEnvironmentVariable(\"NewWellUWI\", rand);\r",
											"postman.setEnvironmentVariable(\"NewWellName\", \"CertificationWell\" + rand);\r",
											"postman.setEnvironmentVariable(\"recordID\", dataPartition + \":\" + record + \":\" + rand);\r",
											"cp = pm.environment.get(\"cloud_platform\");\r",
											"if (cp == \"Azure\") {\r",
											"    pm.environment.set(\"New_OwnerDataGroup\", \"data.default.owner\");\r",
											"    pm.environment.set(\"New_ViewerDataGroup\", \"data.default.viewer\");\r",
											"   }\r",
											"else{\r",
											"    pm.environment.set(\"New_OwnerDataGroup\", \"data.default.owners\");\r",
											"    pm.environment.set(\"New_ViewerDataGroup\", \"data.default.viewers\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"description": "This value should be the desired data partition id.",
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"acl\": {\n      \"owners\": [\n        \"{{New_OwnerDataGroup}}@{{data-partition-id}}{{domain}}\"\n      ],\n      \"viewers\": [\n        \"{{New_ViewerDataGroup}}@{{data-partition-id}}{{domain}}\"\n      ]\n    },\n    \"data\": {\n        \"WellID\": \"SMP G09995 001S0B1\",\n        \"SequenceNumber\": \"1\"\n      },\n    \"kind\": \"{{kind}}\",\n    \"legal\": {\n      \"legaltags\": [\n        \"{{tagName}}\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    },\n    \"meta\": [\n      {}\n    ],\n    \"version\": 0\n  }\n]\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{STORAGE_HOST}}/records",
									"host": [
										"{{STORAGE_HOST}}"
									],
									"path": [
										"records"
									],
									"query": [
										{
											"key": "skipdupes",
											"value": "true",
											"description": "Skip duplicates when updating records with the same value.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04 Storage - Get record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status description - OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "This value should be the desired data partition id.",
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{STORAGE_HOST}}/records/{{recordID}}",
									"host": [
										"{{STORAGE_HOST}}"
									],
									"path": [
										"records",
										"{{recordID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{SEARCH_HOST}}{{docs_suffix}}",
									"host": [
										"{{SEARCH_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "01 Search On Basis Of Kind and Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Count Of Record Should Be 1\", function () {\r",
											"    const responseJson = pm.response.json();    \r",
											"    pm.expect(responseJson.totalCount).to.eql(1);\r",
											"});\r",
											"pm.test(\"Data Should Be Indexed\", function () {\r",
											"    const responseJson = pm.response.json();    \r",
											"    pm.expect(responseJson.results[0]).to.have.property(\"data\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function() {}, 50000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"kind\": \"{{kind}}\",\r\n    \"query\": \"id:\\\"{{recordID}}\\\"\"  \r\n}"
								},
								"url": {
									"raw": "{{SEARCH_HOST}}/query",
									"host": [
										"{{SEARCH_HOST}}"
									],
									"path": [
										"query"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "File",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{FILE_HOST}}/api-docs",
									"host": [
										"{{FILE_HOST}}"
									],
									"path": [
										"api-docs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "Get UploadURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{FILE_HOST}}/files/uploadURL",
									"host": [
										"{{FILE_HOST}}"
									],
									"path": [
										"files",
										"uploadURL"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "WorkFlow",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{osdu-cpd}}/osdu-workflow/api/workflow/v2/api-docs",
									"protocol": "https",
									"host": [
										"{{osdu-cpd}}"
									],
									"path": [
										"osdu-workflow",
										"api",
										"workflow",
										"v2",
										"api-docs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "Get Workflows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{WORKFLOW_HOST}}/workflow?prefix=test",
									"host": [
										"{{WORKFLOW_HOST}}"
									],
									"path": [
										"workflow"
									],
									"query": [
										{
											"key": "prefix",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Indexer",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{INDEXER_HOST}}{{docs_suffix}}",
									"host": [
										"{{INDEXER_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Seismic",
			"item": [
				{
					"name": "Status",
					"item": [
						{
							"name": "getServiceStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SEISMICDMS_HOST}}/svcstatus",
									"host": [
										"{{SEISMICDMS_HOST}}"
									],
									"path": [
										"svcstatus"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Wellbore",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "Get API Docs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{WELLBORE_DDMS_HOST}}/api/os-wellbore-ddms/openapi.json",
									"host": [
										"{{WELLBORE_DDMS_HOST}}"
									],
									"path": [
										"api",
										"os-wellbore-ddms",
										"openapi.json"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Version",
					"item": [
						{
							"name": "Get Version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{WELLBORE_DDMS_HOST}}/api/os-wellbore-ddms/openapi.json",
									"host": [
										"{{WELLBORE_DDMS_HOST}}"
									],
									"path": [
										"api",
										"os-wellbore-ddms",
										"openapi.json"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}